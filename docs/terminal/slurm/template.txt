---
layout: default
title: Automatic SSH
parent: Terminal
---

# Automatic SSH (No Password) for MacOS

Generate a key in your `/home/`:

```
# -t is type
# -b is bits
ssh-keygen -t rsa -b 4096
```

Save the key in the default, it should be `~/.ssh/id_rsa`. You do not want to have a passphrase. Press enter 3 times. 

Congrats! You now have a key! Two files are made: 

1. id_rsa - This is your RSA "private" key used to sign and authenticate your connection to a remote host.
2. id_rsa.pub - This is your "public" key, which when suppied to the remote host (Next step), allows the host to authenticate the connections as being from you.

Copy the key to your remote host (i.e. Schooner, PETE, etc.), by adding this to the `authorized_keys` file.

```
cat ~/.ssh/id_rsa.pub | ssh <username>@<hostname> 'cat >> ~/.ssh/authorized_keys'
```

Enter your password one last time, and you're done!

# Managing Multiple SSH Connections

If you are regularly connecting to multiple remote systems over SSH, youâ€™ll find that remembering all of the remote IP addresses, different usernames, non-standard ports, and various command-line options is difficult.

OpenSSH allows you to set up a per-user configuration file, `~/.ssh/config`, where you can store different SSH options for each remote machine you connect to.

Make a `~/.ssh/config` file, and include the following:

```
Host ALIAS1
    HostName <hostname1>
    User <username1>

Host ALIAS2
    HostName <hostname2>
    User <username2>

Host ALIAS3
    SSH_OPTION value
    SSH_OPTION value
```

- `ALIAS` would some pattern for your login (i.e. `ssh ALIAS1`).
- `HostName` is the <hostname> without the `@`.
- `User` is only your <username>.
- NOTE: Indentations are not required, but makes the file easier to read.

